// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    public readonly driver: pulumi.Output<string>;
    public readonly driverOpts: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly labels: pulumi.Output<{[key: string]: any} | undefined>;
    public /*out*/ readonly mountpoint: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: VolumeState = argsOrState as VolumeState | undefined;
            inputs["driver"] = state ? state.driver : undefined;
            inputs["driverOpts"] = state ? state.driverOpts : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["mountpoint"] = state ? state.mountpoint : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            inputs["driver"] = args ? args.driver : undefined;
            inputs["driverOpts"] = args ? args.driverOpts : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["mountpoint"] = undefined /*out*/;
        }
        super("docker:index/volume:Volume", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    readonly driver?: pulumi.Input<string>;
    readonly driverOpts?: pulumi.Input<{[key: string]: any}>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly mountpoint?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    readonly driver?: pulumi.Input<string>;
    readonly driverOpts?: pulumi.Input<{[key: string]: any}>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
}
