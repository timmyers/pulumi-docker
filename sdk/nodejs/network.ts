// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    public readonly attachable: pulumi.Output<boolean | undefined>;
    public readonly checkDuplicate: pulumi.Output<boolean | undefined>;
    public readonly driver: pulumi.Output<string>;
    public readonly ingress: pulumi.Output<boolean | undefined>;
    public readonly internal: pulumi.Output<boolean>;
    public readonly ipamConfigs: pulumi.Output<{ auxAddress?: {[key: string]: any}, gateway?: string, ipRange?: string, subnet?: string }[] | undefined>;
    public readonly ipamDriver: pulumi.Output<string | undefined>;
    public readonly ipv6: pulumi.Output<boolean | undefined>;
    public readonly labels: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly options: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly scope: pulumi.Output<string>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: NetworkState = argsOrState as NetworkState | undefined;
            inputs["attachable"] = state ? state.attachable : undefined;
            inputs["checkDuplicate"] = state ? state.checkDuplicate : undefined;
            inputs["driver"] = state ? state.driver : undefined;
            inputs["ingress"] = state ? state.ingress : undefined;
            inputs["internal"] = state ? state.internal : undefined;
            inputs["ipamConfigs"] = state ? state.ipamConfigs : undefined;
            inputs["ipamDriver"] = state ? state.ipamDriver : undefined;
            inputs["ipv6"] = state ? state.ipv6 : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["scope"] = state ? state.scope : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            inputs["attachable"] = args ? args.attachable : undefined;
            inputs["checkDuplicate"] = args ? args.checkDuplicate : undefined;
            inputs["driver"] = args ? args.driver : undefined;
            inputs["ingress"] = args ? args.ingress : undefined;
            inputs["internal"] = args ? args.internal : undefined;
            inputs["ipamConfigs"] = args ? args.ipamConfigs : undefined;
            inputs["ipamDriver"] = args ? args.ipamDriver : undefined;
            inputs["ipv6"] = args ? args.ipv6 : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["scope"] = undefined /*out*/;
        }
        super("docker:index/network:Network", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    readonly attachable?: pulumi.Input<boolean>;
    readonly checkDuplicate?: pulumi.Input<boolean>;
    readonly driver?: pulumi.Input<string>;
    readonly ingress?: pulumi.Input<boolean>;
    readonly internal?: pulumi.Input<boolean>;
    readonly ipamConfigs?: pulumi.Input<pulumi.Input<{ auxAddress?: pulumi.Input<{[key: string]: any}>, gateway?: pulumi.Input<string>, ipRange?: pulumi.Input<string>, subnet?: pulumi.Input<string> }>[]>;
    readonly ipamDriver?: pulumi.Input<string>;
    readonly ipv6?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly options?: pulumi.Input<{[key: string]: any}>;
    readonly scope?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    readonly attachable?: pulumi.Input<boolean>;
    readonly checkDuplicate?: pulumi.Input<boolean>;
    readonly driver?: pulumi.Input<string>;
    readonly ingress?: pulumi.Input<boolean>;
    readonly internal?: pulumi.Input<boolean>;
    readonly ipamConfigs?: pulumi.Input<pulumi.Input<{ auxAddress?: pulumi.Input<{[key: string]: any}>, gateway?: pulumi.Input<string>, ipRange?: pulumi.Input<string>, subnet?: pulumi.Input<string> }>[]>;
    readonly ipamDriver?: pulumi.Input<string>;
    readonly ipv6?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly name?: pulumi.Input<string>;
    readonly options?: pulumi.Input<{[key: string]: any}>;
}
